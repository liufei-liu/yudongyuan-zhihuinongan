<!DOCTYPE HTML>
<html>
	<head>
		<meta charset="utf-8"/>
		<meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
		<meta name="HandheldFriendly" content="true"/>
		<meta name="MobileOptimized" content="320"/>
		<title>Hello H5+</title>
		<script type="text/javascript" src="app/js/commonbluetooth.js"></script>
		<script type="text/javascript" src="app/js/pluginkejiabluetooth.js"></script>
		<!-- <script type="text/javascript" src="app/js/pr.js"></script> -->
		<script type="text/javascript">
var bds = []; // 可连接设备列表
var deviceId = null, bconnect = false;
var bss = [];	// 连接设备服务列表
var serviceId = null;
var bscs = [];	// 连接设备服务对应的特征值列表
var characteristicId = null;
var bscws = [];  // 可写特征值列表
var wcharacteristicId = null;
// 重设数据 
function resetDevices(d,s){
	d||(bds=[],deviceId=null,document.getElementById('deivce').value='');
	s||(bss=[],serviceId=null,document.getElementById('service').value='');
	bscs=[],bscws=[],characteristicId=null,wcharacteristicId=null,document.getElementById('characteristic').value='',document.getElementById('wcharacteristic').value='';
}

// 页面初始化操作 
document.addEventListener('plusready', function(e){
	// 监听蓝牙适配器状态变化
	plus.bluetooth.onBluetoothAdapterStateChange(function(e){
		outLine('onBluetoothAdapterStateChange: '+JSON.stringify(e));
	});
	//  监听搜索到新设备 
	plus.bluetooth.onBluetoothDeviceFound(function(e){
		var devices = e.devices;
		outLine('onBluetoothDeviceFound: '+devices.length);
		for(var i in devices){
			outLine(JSON.stringify(devices[i]));
			var device = devices[i];
			if(device.deviceId/*&&device.name&&device.name.length>0&&device.name!='null'*/){
				bds.push(device);
			}
		}
		if(!bconnect && bds.length>0){	// 默认选择最后一个
			var n = bds[bds.length-1].name;
			if(!n || n.length<=0){
				n = bds[bds.length-1].deviceId;
			}
			document.getElementById('deivce').value = n;
			deviceId = bds[bds.length-1].deviceId;
		}
	});
	//  监听低功耗蓝牙设备连接状态变化 
	plus.bluetooth.onBLEConnectionStateChange(function(e){
		outLine('onBLEConnectionStateChange: '+JSON.stringify(e));
		if(deviceId == e.deviceId){	// 更新连接状态
			bconnect = e.connected;
		}
	});
	// 监听低功耗蓝牙设备的特征值变化 
	plus.bluetooth.onBLECharacteristicValueChange(function(e){
		outLine('onBLECharacteristicValueChange: '+JSON.stringify(e));
		var value = buffer2hex(e.value);
		outLine('value(hex) = '+value);
		if(characteristicId == e.characteristicId){
			// 更新到页面显示
			document.getElementById('readvalue').value = value;
		}else if(wcharacteristicId == e.characteristicId){
			plus.nativeUI.toast(value);
		}
	});
}, false);

function buffer2hex(value){
	var t='';
	if(value){
		var v=new Uint8Array(value);
		for(var i in v){
			t += '0x'+v[i].toString(16)+' ';
		}
	}else{
		t='无效值';
	}
	return t;
}

// 打开蓝牙 
function openBluetooth(){
	outSet('打开蓝牙适配器：');
	plus.bluetooth.openBluetoothAdapter({
		success: function(e){
			outLine('打开成功!');
		},
		fail: function(e){
			outLine('打开失败! '+JSON.stringify(e));
		}
	});
}

// 开始搜索蓝牙设备 
function startDiscovery(){
	outSet('开始搜索蓝牙设备：');
	resetDevices();
	plus.bluetooth.startBluetoothDevicesDiscovery({
		success: function(e){
			outLine('开始搜索成功!');
		},
		fail: function(e){
			outLine('开始搜索失败! '+JSON.stringify(e));
		}
	});
}

// 停止搜索蓝牙设备 
function stopDiscovery(){
	outSet('停止搜索蓝牙设备：');
	plus.bluetooth.stopBluetoothDevicesDiscovery({
		success: function(e){
			outLine('停止搜索成功!');
		},
		fail: function(e){
			outLine('停止搜索失败! '+JSON.stringify(e));
		}
	});
}

// 选择蓝牙设备 
function selectDevice(){
	if(bds.length <= 0){
		plus.nativeUI.toast('未搜索到有效蓝牙设备!');
		return;
	}
	var bts=[];
	for(var i in bds){
		var t = bds[i].name;
		if(!t || t.length<=0){
			t = bds[i].deviceId;
		}		
		bts.push({title:t});
	}
	plus.nativeUI.actionSheet({title:"选择蓝牙设备",cancel:"取消",buttons:bts}, function(e){
		if(e.index>0){
			document.getElementById('deivce').value = bds[e.index-1].name;
			deviceId = bds[e.index-1].deviceId;
			outLine('选择了"'+bds[e.index-1].name+'"');
		}
	});
}

// 连接蓝牙设备 
function connectDevice(){
	if(!deviceId){
		plus.nativeUI.toast('未选择设备!');
		return;
	}
	outSet('连接设备: '+deviceId);
	plus.bluetooth.createBLEConnection({
		deviceId: deviceId,
		success: function(e){
			outLine('连接成功!');
		},
		fail: function(e){
			outLine('连接失败! '+JSON.stringify(e));
		}
	});
}

// 获取设备服务 
function getServices(){
	if(!deviceId){
		plus.nativeUI.toast('未选择设备!');
		return;
	}
	if(!bconnect){
		plus.nativeUI.toast('未连接蓝牙设备!');
		return;
	}
	resetDevices(true);
	outSet('获取蓝牙设备服务:');
	plus.bluetooth.getBLEDeviceServices({
		deviceId: deviceId,
		success: function(e){
			var services = e.services;
			outLine('获取服务成功! '+services.length);
			if(services.length>0){
				for(var i in services){
					bss.push(services[i]);
					outLine(JSON.stringify(services[i]));
				}
				if(bss.length>0){	// 默认选择最后一个服务
					document.getElementById('service').value = serviceId = bss[bss.length-1].uuid;
				}
			}else{
				outLine('获取服务列表为空?');
			}
		},
		fail: function(e){
			outLine('获取服务失败! '+JSON.stringify(e));
		}
	});
}

// 选择服务 
function selectService(){
	if(bss.length <= 0){
		plus.nativeUI.toast('未获取到有效蓝牙服务!');
		return;
	}
	var bts=[];
	for(var i in bss){
		bts.push({title:bss[i].uuid});
	}
	plus.nativeUI.actionSheet({title:"选择服务",cancel:"取消",buttons:bts}, function(e){
		if(e.index>0){
			document.getElementById('service').value = serviceId = bss[e.index-1].uuid;
			outLine('选择了服务: "'+serviceId+'"');
		}
	});
}

// 获取服务的特征值 
function getCharacteristics(){
	if(!deviceId){
		plus.nativeUI.toast('未选择设备!');
		return;
	}
	if(!bconnect){
		plus.nativeUI.toast('未连接蓝牙设备!');
		return;
	}
	if(!serviceId){
		plus.nativeUI.toast('未选择服务!');
		return;
	}
	resetDevices(true, true);
	outSet('获取蓝牙设备指定服务的特征值:');
	plus.bluetooth.getBLEDeviceCharacteristics({
		deviceId: deviceId,
		serviceId: serviceId,
		success: function(e){
			var characteristics = e.characteristics;
			outLine('获取特征值成功! '+characteristics.length);
			if(characteristics.length>0){
				for(var i in characteristics){
					var characteristic = characteristics[i];
					outLine(JSON.stringify(characteristic));
					if(characteristic.properties){
						if(characteristic.properties.read){
							bscs.push(characteristics[i]);
						}
						if(characteristic.properties.write){
							bscws.push(characteristics[i]);
							if(characteristic.properties.notify||characteristic.properties.indicate){
								plus.bluetooth.notifyBLECharacteristicValueChange({	//监听数据变化
									deviceId: deviceId,
									serviceId: serviceId,
									characteristicId: characteristic.uuid,
									success: function(e){
										outLine('notifyBLECharacteristicValueChange '+characteristic.uuid+' success.');
									},
									fail: function(e){
										outLine('notifyBLECharacteristicValueChange '+characteristic.uuid+' failed! '+JSON.stringify(e));
									}
								});
							}
						}
					}
				}
				if(bscs.length>0){	// 默认选择最后特征值
					document.getElementById('characteristic').value = characteristicId = bscs[bscs.length-1].uuid;
				}
				if(bscws.length>0){	// 默认选择最后一个可写特征值
					document.getElementById('wcharacteristic').value = wcharacteristicId = bscws[bscws.length-1].uuid;
				}
			}else{
				outLine('获取特征值列表为空?');
			}
		},
		fail: function(e){
			outLine('获取特征值失败! '+JSON.stringify(e));
		}
	});
}

// 选择特征值(读取) 
function selectCharacteristic(){
	if(bscs.length <= 0){
		plus.nativeUI.toast('未获取到有效可读特征值!');
		return;
	}
	var bts=[];
	for(var i in bscs){
		bts.push({title:bscs[i].uuid});
	}
	plus.nativeUI.actionSheet({title:'选择特征值',cancel:'取消',buttons:bts}, function(e){
		if(e.index>0){
			document.getElementById('characteristic').value = characteristicId = bscs[e.index-1].uuid;
			outLine('选择了特征值: "'+characteristicId+'"');
		}
	});
}

// 读取特征值数据 
function readValue(){
	if(!deviceId){
		plus.nativeUI.toast('未选择设备!');
		return;
	}
	if(!bconnect){
		plus.nativeUI.toast('未连接蓝牙设备!');
		return;
	}
	if(!serviceId){
		plus.nativeUI.toast('未选择服务!');
		return;
	}
	if(!characteristicId){
		plus.nativeUI.toast('未选择读取的特征值!');
		return;
	}
	outSet('读取蓝牙设备的特征值数据: ');
	plus.bluetooth.readBLECharacteristicValue({
		deviceId: deviceId,
		serviceId: serviceId,
		characteristicId: characteristicId,
		success: function(e){
			outLine('读取数据成功!');
		},
		fail: function(e){
			outLine('读取数据失败! '+JSON.stringify(e));
		}
	});
}

// 选择特征值(写入) 
function selectwCharacteristic(){
	if(bscws.length <= 0){
		plus.nativeUI.toast('未获取到有效可写特征值!');
		return;
	}
	var bts=[];
	for(var i in bscws){
		bts.push({title:bscws[i].uuid});
	}
	plus.nativeUI.actionSheet({title:'选择特征值',cancel:'取消',buttons:bts}, function(e){
		if(e.index>0){
			document.getElementById('wcharacteristic').value = wcharacteristicId = bscws[e.index-1].uuid;
			outLine('选择了特征值: "'+wcharacteristicId+'"');
		}
	});
}

// 写入特征值数据 
function writeValue(){
	if(!deviceId){
		plus.nativeUI.toast('未选择设备!');
		return;
	}
	if(!bconnect){
		plus.nativeUI.toast('未连接蓝牙设备!');
		return;
	}
	if(!serviceId){
		plus.nativeUI.toast('未选择服务!');
		return;
	}
	if(!wcharacteristicId){
		plus.nativeUI.toast('未选择写入的特征值!');
		return;
	}
	var value = document.getElementById('writevalue').value;
	if(!value || value==''){
		plus.nativeUI.toast('请输入需要写入的数据');
		document.getElementById('writevalue').focus();
		return;
	}
	// 转换为ArrayBuffer写入蓝牙
	str2ArrayBuffer(value, function(buffer){
		outSet('写入蓝牙设备的特征值数据: ');
		plus.bluetooth.writeBLECharacteristicValue({
			deviceId: deviceId,
			serviceId: serviceId,
			characteristicId: wcharacteristicId,
			value: buffer,
			success: function(e){
				outLine('写入数据成功!');
			},
			fail: function(e){
				outLine('写入数据失败! '+JSON.stringify(e));
			}
		});
	});
}

function str2ArrayBuffer(s,f) {
    var b = new Blob([s],{type:'text/plain'});
    var r = new FileReader();
    r.readAsArrayBuffer(b);
    r.onload = function(){if(f)f.call(null,r.result)}
}


// 断开蓝牙设备
function disconnectDevice(){
	if(!deviceId){
		plus.nativeUI.toast('未选择设备!');
		return;
	}
	resetDevices(true);
	outSet('断开蓝牙设备连接：');
	plus.bluetooth.closeBLEConnection({
		deviceId: deviceId,
		success: function(e){
			outLine('断开连接成功!');
		},
		fail: function(e){
			outLine('断开连接失败! '+JSON.stringify(e));
		}
	});
}

// 关闭蓝牙
function closeBluetooth(){
	outSet('关闭蓝牙适配器：');
	resetDevices();
	plus.bluetooth.closeBluetoothAdapter({
		success: function(e){
			outLine('关闭成功!');
			bconnect = false;
		},
		fail: function(e){
			outLine('关闭失败! '+JSON.stringify(e));
		}
	});
}

 //同步调用原生方法 
function KejiaNativeSync() {
        //调用customPlugin插件的testFunctionSync方法，传递了两个参数，分别是James和Tracy
        //用result变量接收返回值
        // var result = plus.bridge.execSync("pluginKeJiaBT", "KeJiaTestFunction", {"PRO_CATALOG_NAME":"冰菜20200508-15","DATE_TIME":"2020-05-12","WEIGHT":"10","EN_USER_MOBILE":"13770950875","ENTERPRISE_NAME":"张本全（葡萄）","END_ADDR":"南京市江宁区谷里街道公塘社区","REDIRECT_URL":"http://m.jnzhna.com/index/redirect/qcode/REGISTRATION_ID/5eb511319418f","BTMAC":"00:15:83:FD:A7:D4", "MyHello":"222222"});
		var result = plus.bridge.execSync("pluginKeJiaBT", "KeJiaTestFunction", {"REGISTRATION_ID":"5eb511319418f","PRO_CATALOG_NAME":"冰菜20200508-15","DATE_TIME":"2020-05-14","PRINT_NUM":"1","WEIGHT":"10","UNIT":"千克","PRINT_NUM":"1","ENTERPRISE_NAME":"张本全（葡萄）","END_ADDR":"南京市江宁区谷里街道公塘社区","REDIRECT_URL":"http://m.jnzhna.com/index/redirect/qcode/REGISTRATION_ID/5eb511319418f","EN_USER_MOBILE":"13770950875","PRINT_TYPE":"合格证","TITLE":"南京市江宁区食用农产品合格证","BTMAC":"00:15:83:FD:A7:D4"});
        alert(result);
        console.log(result);
        alert(JSON.stringify(plus.bridge));
		
		return result;
}


	
    // //异步调用原生方法
    // nativeAsync: function(){
    //     var bridge = plus.bridge;
    //     var success = function(msg){
    //         alert("onSuccess,msg = " + msg);
    //     };
    //     var failed = function(msg){
    //         alert("onFailed,msg = " + msg);
    //     }
    //     //获取回调的id
    //     var callbackId = bridge.callbackId(success, failed);
    //     //注意，这里要跟原生开发的人定好回调id在参数列表中的索引位置
    //     plus.bridge.exec("customPlugin", "testFunctionAsync", [callbackId, "secondParam"]);
    // }

		</script>
		<link rel="stylesheet" href="app/css/commonbluetooth.css" type="text/css" charset="utf-8"/>
	</head>
	<body>
		<br/>
		<div class="button" onclick="openBluetooth()">初始化蓝牙模块</div>
		<div class="button" onclick="startDiscovery()">开始搜索蓝牙设备</div>
		<div class="button" onclick="stopDiscovery()">停止搜索蓝牙设备</div>
		设备：<input id="deivce" type="text" disabled="disabled"></input>
		<a href="#" onclick="selectDevice()">选择设备</a>
		<div class="button" onclick="connectDevice()">连接蓝牙设备</div>
		
		
		<div class="button" id="KJbutton" >科嘉蓝牙打印</div>
		
		
		<div>
			 <p>
				 <input id="bt1" type="button" value="搜索设备" onclick="searchDevices('a')">
			 </p> 
			        <div>  
			            未配对蓝牙设备  
			            <ul id="list1">  
			
			            </ul>  
			        </div>  
			
			        <div>  
			            已配对蓝牙设备  
			
			            <ul id="list2">  
			
			            </ul>  
			        </div>  
			
		</div>
		
		
		
		
		<div class="button" onclick="getServices()">获取设备服务</div>
		服务：<input id="service" type="text" disabled="disabled"></input>
		<a href="#" onclick="selectService()">选择服务</a>
		<div class="button" onclick="getCharacteristics()">获取服务的特征值</div>
		读取特征值：<input id="characteristic" type="text" disabled="disabled"></input>
		<a href="#" onclick="selectCharacteristic()">选择</a>
		<div class="button" onclick="readValue()">读取特征值数据</div>
		读取数据：<input id="readvalue" type="text" disabled="disabled" style="width:60%"></input>
		<hr/>
		<br/>
		写入特征值：<input id="wcharacteristic" type="text" disabled="disabled"></input>
		<a href="#" onclick="selectwCharacteristic()">选择</a>
		<div class="button" onclick="writeValue()">写入特征值数据</div>
		写入数据：<input id="writevalue" type="text" style="width:60%;-webkit-user-select:text" value="test"></input>
		<div class="button" onclick="disconnectDevice()">断开蓝牙设备</div>
		<div class="button" onclick="closeBluetooth()">关闭蓝牙模块</div>
		<div id="outpos"/>
		<div id="output">
Bluetooth用于管理蓝牙设备，搜索附近蓝牙设备、连接实现数据通信等。
		</div>
		<script>
			var objButton=document.getElementById("KJbutton");
			objButton.onclick=function() {
				alert(111111);
				var res=KejiaNativeSync();
				if (res == "success"){
					alert(2222222222);
				}
				
			}
			
			
			
			
			
		
			//address=""搜索蓝牙//address=设备mac地址，自动配对给出mac地址的设备  
			
			function searchDevices(address) {  
			    //注册类  
			    var main = plus.android.runtimeMainActivity();  
			    var IntentFilter = plus.android.importClass('android.content.IntentFilter');  
			    var BluetoothAdapter = plus.android.importClass("android.bluetooth.BluetoothAdapter");  
			    var BluetoothDevice = plus.android.importClass("android.bluetooth.BluetoothDevice");  
			    var BAdapter = BluetoothAdapter.getDefaultAdapter();  
			    console.log("开始搜索设备");  
			    var filter = new IntentFilter();  
			    var bdevice = new BluetoothDevice();  
			    var on = null;  
			    var un = null;  
			    var vlist1 = document.getElementById('list1'); //注册容器用来显示未配对设备  
			    vlist1.innerHTML = ''; //清空容器  
			    var vlist2 = document.getElementById('list2'); //注册容器用来显示未配对设备  
			    vlist2.innerHTML = ''; //清空容器  
			    var button1 = document.getElementById('bt1');  
			    button1.disabled=true;  
			    button1.value='正在搜索请稍候';  
			    BAdapter.startDiscovery(); //开启搜索  
			    var receiver;  
			    receiver = plus.android.implements('io.dcloud.android.content.BroadcastReceiver', {  
			        onReceive: function(context, intent) { //实现onReceiver回调函数  
			            plus.android.importClass(intent); //通过intent实例引入intent类，方便以后的‘.’操作  
			            console.log(intent.getAction()); //获取action  
			            if(intent.getAction() == "android.bluetooth.adapter.action.DISCOVERY_FINISHED"){  
			                main.unregisterReceiver(receiver);//取消监听  
			                button1.disabled=false;  
			                button1.value='搜索设备';  
			                console.log("搜索结束")  
			            }else{  
			            BleDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  
			            //判断是否配对  
			            if (BleDevice.getBondState() == bdevice.BOND_NONE) {  
			                console.log("未配对蓝牙设备：" + BleDevice.getName() + '    ' + BleDevice.getAddress());  
			                //参数如果跟取得的mac地址一样就配对  
			                if (address == BleDevice.getAddress()) {  
			                    if (BleDevice.createBond()) { //配对命令.createBond()  
			                        console.log("配对成功");  
			                        var li2 = document.createElement('li'); //注册  
			                        li2.setAttribute('id', BleDevice.getAddress()); //打印机mac地址  
			                        li2.setAttribute('onclick', 'print(id)'); //注册click点击列表进行打印  
			                        li2.innerText = BleDevice.getName();  
			                        vlist2.appendChild(li2);  
			                    }  
			
			                } else {  
			                    if(BleDevice.getName() != on ){ //判断防止重复添加  
			                    var li1 = document.createElement('li'); //注册  
			                    li1.setAttribute('id', BleDevice.getAddress()); //打印机mac地址  
			                    li1.setAttribute('onclick', 'searchDevices(id)'); //注册click点击列表进行配对  
			                    on = BleDevice.getName();  
			                    li1.innerText = on;  
			                    vlist1.appendChild(li1);  
			
			                    }  
			
			                }  
			            } else {  
			                if(BleDevice.getName() != un ){ //判断防止重复添加  
			                console.log("已配对蓝牙设备：" + BleDevice.getName() + '    ' + BleDevice.getAddress());  
			                var li2 = document.createElement('li'); //注册  
			                li2.setAttribute('id', BleDevice.getAddress()); //打印机mac地址  
			                li2.setAttribute('onclick', 'print(id)'); //注册click点击列表进行打印  
			                un = BleDevice.getName();                 
			                li2.innerText = un;  
			                vlist2.appendChild(li2);}  
			            }}  
			
			        }  
			    });  
			
			    filter.addAction(bdevice.ACTION_FOUND);  
			    filter.addAction(BAdapter.ACTION_DISCOVERY_STARTED);  
			    filter.addAction(BAdapter.ACTION_DISCOVERY_FINISHED);  
			    filter.addAction(BAdapter.ACTION_STATE_CHANGED);  
			
			    main.registerReceiver(receiver, filter); //注册监听  
			}  
			
			var device = null,  
			    BAdapter = null,  
			    BluetoothAdapter = null,  
			    uuid = null,  
			    main = null,  
			    bluetoothSocket = null;  
			
			function print(mac_address) {  
			    if (!mac_address) {  
			        mui.toast('请选择蓝牙打印机');  
			        return;  
			    }  
			
			    main = plus.android.runtimeMainActivity();  
			    BluetoothAdapter = plus.android.importClass("android.bluetooth.BluetoothAdapter");  
			    UUID = plus.android.importClass("java.util.UUID");  
			    uuid = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");  
			    BAdapter = BluetoothAdapter.getDefaultAdapter();  
			    device = BAdapter.getRemoteDevice(mac_address);  
			    plus.android.importClass(device);  
			    bluetoothSocket = device.createInsecureRfcommSocketToServiceRecord(uuid);  
			    plus.android.importClass(bluetoothSocket);  
			
			    if (!bluetoothSocket.isConnected()) {  
			        console.log('检测到设备未连接，尝试连接....');  
			        bluetoothSocket.connect();  
			    }  
			
			    console.log('设备已连接');  
			
			    if (bluetoothSocket.isConnected()) {  
			        var outputStream = bluetoothSocket.getOutputStream();  
			        plus.android.importClass(outputStream);  
			        var string = "打印测试\r\n";  
			        var bytes = plus.android.invoke(string, 'getBytes', 'gbk');  
			        outputStream.write(bytes);  
			        outputStream.flush();  
			        device = null //这里关键  
			        bluetoothSocket.close(); //必须关闭蓝牙连接否则意外断开的话打印错误  
			
			    }  
			
			}

		</script>
	</body>
</html>